<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<s:ComboBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:s="library://ns.adobe.com/flex/spark"
				
				restrict="0-9."
				dataProvider="{null}" 
				mouseFocusEnabled="true"
				tabFocusEnabled="false">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.core.LayoutDirection;
			//import mx.core.mx_internal;
			
			//use namespace mx_internal;

			private const _defaultDataProvider:ArrayList = new ArrayList([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 24, 26, 28, 36, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 142, 150, 158, 166, 174, 182, 190, 198, 206, 214, 222]);
			
			public var invertKeyUpEvents:Boolean;

			public override function set dataProvider(value:IList):void
			{
				if (value == null)
				{
					super.dataProvider = _defaultDataProvider;
				}
				else
				{
					super.dataProvider = value;
				}
			}
			
			/**
			 *  The selected font size
			 */
			public function set selectedFontSize(value:String):void {
				var float:Number = parseFloat(value);
				
				
				if (isNaN(float)) {
					this.selectedItem = value;
				}
				else {
					// add other values
					if (_defaultDataProvider.source.indexOf(float)==-1) {
						_defaultDataProvider.addItem(float);
					}
					
					this.selectedItem = float;
				}
			}
			
			/**
			 *  The selected font family
			 */
			public function get selectedFontSize():String {
				return this.selectedItem;
			}
			
			// we create this to get rid of compiler bug when extending mx_internal in MXML 
			// https://forums.adobe.com/thread/678342
			public namespace mx_internal="http://www.adobe.com/2006/flex/mx/internal";
			
			override mx_internal function mapKeycodeForLayoutDirection(event:KeyboardEvent, mapUpDown:Boolean=false):uint {
				var keyCode:uint = event.keyCode;
				
				if (invertKeyUpEvents) {
					if (keyCode==Keyboard.DOWN) {
						keyCode = Keyboard.UP;
					}
					else if (keyCode==Keyboard.UP) {
						keyCode = Keyboard.DOWN;
					}
				}
				
				// If rtl layout, left still means left and right still means right so
				// swap the keys to get the correct action.
				switch (keyCode)
				{
					case Keyboard.DOWN:
					{
						// typically, if ltr, the same as RIGHT
						if (mapUpDown && layoutDirection == LayoutDirection.RTL)
							keyCode = Keyboard.LEFT;
						break;
					}
					case Keyboard.RIGHT:
					{
						if (layoutDirection == LayoutDirection.RTL)
							keyCode = Keyboard.LEFT;
						break;
					}
					case Keyboard.UP:
					{
						// typically, if ltr, the same as LEFT
						if (mapUpDown && layoutDirection == LayoutDirection.RTL)
							keyCode = Keyboard.RIGHT;                
						break;
					}
					case Keyboard.LEFT:
					{
						if (layoutDirection == LayoutDirection.RTL)
							keyCode = Keyboard.RIGHT;                
						break;
					}
				}
				
				return keyCode;
				
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:ComboBox>
