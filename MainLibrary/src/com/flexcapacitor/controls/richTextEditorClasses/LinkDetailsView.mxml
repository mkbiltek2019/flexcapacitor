<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:mx="library://ns.adobe.com/flex/mx" 
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 
			 tabFocusEnabled="false" 
			 xmlns:controls="com.flexcapacitor.controls.*"
			 >
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.core.mx_internal;
			
			use namespace mx_internal;
			
			/**
			 *  The link
			 */
			public function set selectedLink(value:String):void {
				textDisplay.text = value;
			}
			
			public function get selectedLink():String {
				return textDisplay.text;
			}
			
			private var _linkTargetLocations:ArrayList;

			public function get linkTargetLocations():ArrayList {
				return _linkTargetLocations;
			}

			public function set linkTargetLocations(value:ArrayList):void {
				_linkTargetLocations = value;
				targetLocations.dataProvider = value;
			}
			
			/**
			 *  The link target if one is set
			 */
			public function set selectedTarget(value:String):void {
				targetLocations.selectedItem = value;
				
				if (value==null) {
					/*
					if (targetLocations.textInput) {
						targetLocations.selectedIndex = 1;
						targetLocations.applySelection();
						targetLocations.selectedIndex = ListBase.CUSTOM_SELECTED_ITEM;
						targetLocations.textInput.text = null;
						targetLocations.textInput.dispatchEvent(new TextOperationEvent(TextOperationEvent.CHANGING));
						targetLocations.textInput.dispatchEvent(new TextOperationEvent(TextOperationEvent.CHANGE));
					}
					
					targetLocations.applySelection();
					*/
					
					// force combobox.previousTextInputText to be set to empty when text input is null
				}
			}
			
			public function get selectedTarget():String {
				return targetLocations.selectedItem;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<controls:ClearButtonTextInput id="textDisplay"
								   roundCorners="true"
				minWidth="100" 
				width="100%"
				prompt="Hyperlink"
				mouseFocusEnabled="true"
				tabFocusEnabled="false"
				toolTip="Hyperlink text" 
				text="" />
	
	<s:ComboBox id="targetLocations" prompt="Target" minWidth="100" openOnInput="false"/>
</s:HGroup>
