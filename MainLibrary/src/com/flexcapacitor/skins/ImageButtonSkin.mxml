<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<!--- The default skin class for the Image Button component.  

      @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
             xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             minWidth="21" minHeight="21" 
             alpha.disabled="0.5">
     
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
			import spark.components.Button;
			import spark.core.ContentCache;
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["labelDisplay"];
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
				
				// background color
                if (!isNaN(getStyle("backgroundColor"))) {
                    bgFill.color = getStyle("backgroundColor");
					
					// background alpha
					if (!isNaN(getStyle("backgroundAlpha"))) {
	                    bgFill.alpha = getStyle("backgroundAlpha");
	                }
					else {
	                    bgFill.alpha = 1;
					}
                }
				else {
					bgFill.color = 0;
					bgFill.alpha = 0;
				}
				
				
				// cache images to prevent flicker
				if (iconDisplay) {
					iconDisplay.contentLoader = contentLoader;
					iconDisplay.clearOnLoad = false;
				}
				
				/// padding
				if (!isNaN(getStyle("padding"))) {
					var value:int = getStyle("padding");
					
					if (_originalPaddingBottom==null) _originalPaddingBottom = iconGroupPaddingBottom;
					if (_originalPaddingLeft==null) _originalPaddingLeft = iconGroupPaddingLeft;
					if (_originalPaddingRight==null) _originalPaddingRight = iconGroupPaddingRight;
					if (_originalPaddingTop==null) _originalPaddingTop = iconGroupPaddingTop;
					
					iconGroupPaddingBottom = value;
					iconGroupPaddingLeft = value;
					iconGroupPaddingRight = value;
					iconGroupPaddingTop = value;
				}
				else {
					// bottom 
					if (!isNaN(getStyle("paddingBottom"))) {
						if (_originalPaddingBottom==null) _originalPaddingBottom = iconGroupPaddingBottom;
	                    iconGroupPaddingBottom = getStyle("paddingBottom");
	                }
					else if (_originalPaddingBottom!=null && iconGroupPaddingBottom != _originalPaddingBottom) {
						iconGroupPaddingBottom = int(_originalPaddingBottom);
					}
					
					// left
					if (!isNaN(getStyle("paddingLeft"))) {
						if (_originalPaddingLeft==null) _originalPaddingLeft = iconGroupPaddingLeft;
	                    iconGroupPaddingLeft = getStyle("paddingLeft");
	                }
					else if (_originalPaddingLeft!=null && iconGroupPaddingLeft != _originalPaddingLeft) {
						iconGroupPaddingLeft = int(_originalPaddingLeft);
					}
					
					// right
					if (!isNaN(getStyle("paddingRight"))) {
						if (_originalPaddingRight==null) _originalPaddingRight = iconGroupPaddingRight;
	                    iconGroupPaddingRight = getStyle("paddingRight");
	                }
					else if (_originalPaddingRight!=null && iconGroupPaddingRight != _originalPaddingRight) {
						iconGroupPaddingRight = int(_originalPaddingRight);
					}
					
					// top
					if (!isNaN(getStyle("paddingTop"))) {
						if (_originalPaddingTop==null) _originalPaddingTop = iconGroupPaddingTop;
	                    iconGroupPaddingTop = getStyle("paddingTop");
	                }
					else if (_originalPaddingTop!=null && iconGroupPaddingTop != _originalPaddingTop) {
						iconGroupPaddingTop = int(_originalPaddingTop);
					}
				}
				
				
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
			
			private var _originalPaddingLeft:Object;
			private var _originalPaddingRight:Object;
			private var _originalPaddingTop:Object;
			private var _originalPaddingBottom:Object;
			
			[Bindable]
			public static var contentLoader:ContentCache = new ContentCache();
        ]]>        
    </fx:Script>
        
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
    
	<!-- layer 1: background and hit area -->
    <!--- @private -->
    <s:Rect id="background" left="0" right="0" top="0" bottom="0" >
        <s:fill>
            <s:SolidColor id="bgFill" alpha="0"/>
        </s:fill>
    </s:Rect>

    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
    <s:Label id="labelDisplay"
             textAlign="center"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1" verticalAlign="middle"
             left="10" right="10" top="2" bottom="2">
    </s:Label>
    
</s:SparkButtonSkin>
