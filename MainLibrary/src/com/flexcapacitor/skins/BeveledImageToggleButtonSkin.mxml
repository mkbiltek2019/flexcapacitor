<?xml version="1.0" encoding="utf-8"?>

<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<!--- The default skin class for a Spark ToggleButton component.  

@see spark.components.ToggleButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   
				   minWidth="21" minHeight="21" 
				   alpha.disabledStates="0.5"
				   filters.down="{buttonDownFilters}"
				   filters.downAndSelected="{buttonDownFilters}"
				   filters.upAndSelected="{buttonDownFilters}"
				   filters.overAndSelected="{buttonDownFilters}"
				   buttonMode="true"
				   >
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ToggleButton")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			import spark.components.ToggleButton;
			import spark.core.ContentCache;
					
			/* Define the skin elements that should not be colorized. 
			For toggle button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay"];
			
			/**
			 * @private
			 */    
			override public function get colorizeExclusions():Array {return exclusions;}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}
				
			public static var contentLoader:ContentCache = new ContentCache();
				
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				if (getStyle("source")) {
					//trace("update display");
					imageDisplay.source = getStyle("source");
				}
				
				if (getStyle("scaleMode")) {
					//trace("update display");
					imageDisplay.scaleMode = getStyle("scaleMode");
				}
				
				if (imageDisplay.contentLoader==null) {
					imageDisplay.contentLoader = contentLoader;
					imageDisplay.clearOnLoad = false;
				}
				
				// background color
				if (!isNaN(getStyle("backgroundColor"))) {
					bgFill.color = getStyle("backgroundColor");
					
					// background alpha
					if (!isNaN(getStyle("backgroundAlpha"))) {
						bgFill.alpha = getStyle("backgroundAlpha");
					}
					else {
						bgFill.alpha = 1;
					}
				}
				else {
					bgFill.color = 0;
					bgFill.alpha = 0;
				}
				
				if (getStyle("showBackgroundWhenSelected")=="true") {
					// show background when selected
					if (ToggleButton(owner).selected) {
						bgFill.alpha = 1;
					}
					else {
						bgFill.alpha = 0;
					}
				}
			}
				
				
			override public function setCurrentState(stateName:String, playTransition:Boolean=true):void {
				super.setCurrentState(stateName, playTransition);
				
				if (getStyle("showBackgroundWhenSelected")=="true") {
					// show background when selected
					if (ToggleButton(owner).selected) {
						bgFill.alpha = 1;
					}
					else {
						bgFill.alpha = 0;
					}
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<fx:Array id="buttonDownFilters">
			
			<s:BevelFilter angle="-135" 
						   distance="1" 
						   strength=".8" 
						   blurX="2" blurY="2"
						   highlightColor="0xffffff" 
						   type="inner"/>
		</fx:Array>
		
		
		
		<fx:Array id="bevelFilters">
			<s:BevelFilter id="bevelFilter" 
						   angle="45.0" 
						   blurX="1" blurY="1" 
						   distance="0.4"
						   highlightAlpha="1.0" 
						   knockout="false"
						   highlightColor="#FFFFFF" 
						   shadowColor="#000000" 
						   quality="3" 
						   shadowAlpha="1.0" 
						   strength="1.5"
						   type="inner"/>
		</fx:Array>
	</fx:Declarations>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	
	<!--- Defines the appearance of the image background. -->
	<s:Rect id="background" left="0" right="0" top="0" bottom="0">
		<s:fill>
			<!-- @private -->
			<s:SolidColor id="bgFill" alpha="0"/>
		</s:fill>
	</s:Rect>
	
	<!--- Primary image display skin part. -->
	<s:BitmapImage id="imageDisplay" scaleMode="zoom"
				   left="1" top="1" right="1" bottom="1"/>
	
</s:SparkButtonSkin>
