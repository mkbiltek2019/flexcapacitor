<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
    alpha.disabledStates="0.5" blendMode="normal">

    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.TextInput")]
    ]]>
    </fx:Metadata> 
    
    <fx:Script fb:purpose="styling">
        <![CDATA[
			import mx.core.FlexVersion;
			import mx.events.FlexEvent;
			
			import spark.events.TextOperationEvent;
			
			private var paddingChanged:Boolean;
			
			/* Define the skin elements that should not be colorized. */
			static private const exclusions:Array = ["background", "textDisplay", "promptDisplay", "border"];
			
			/* exclusions before Flex 4.5 for backwards-compatibility purposes */
			static private const exclusions_4_0:Array = ["background", "textDisplay", "promptDisplay"];
			
			/**
			 * @private
			 */
			override public function get colorizeExclusions():Array 
			{
				// Since border is styleable via borderColor, no need to allow chromeColor to affect
				// the border.  This is wrapped in a compatibility flag since this change was added  
				// in Flex 4.5
				if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
				{
					return exclusions_4_0;
				}
				
				return exclusions;
			}
			
			/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
			static private const contentFill:Array = ["bgFill"];
			
			/**
			 *  @private
			 * 
			 * */
			override public function get contentItems():Array {return contentFill};
			
			/**
			 *  @private
			 * */
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (paddingChanged) {
					updatePadding();
					paddingChanged = false;
				}
			}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void {
				useChromeColor = true;
				super.initializationComplete();
			}
			
			private var clearButtonWidth:int;
			
			[Bindable]
			public var showClearButton:Boolean = true;
			
			[Bindable]
			public var showSearchIcon:Boolean = true;
			
			/**
			 *  @private
			 * */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				var roundCorners:Boolean;
				var radius:Number;
				
				showSearchIcon = getStyle("showSearchIcon");
				
				if (getStyle("borderVisible") == true) {
					border.visible = true;
					shadow.visible = true;
					
					background.left = background.top = background.right = background.bottom = 1;
					textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 1;
					
					
					if (getStyle("roundCorners")!=undefined) {
						roundCorners = getStyle("roundCorners");
						radius = height / 2;
						
						if (roundCorners) {
							background.radiusX 	= background.radiusY 	= radius;
							background.radiusX 	= background.radiusY 	= radius;
							border.radiusX 		= border.radiusY 		= radius;
							shadow.radiusX 		= shadow.radiusY 		= radius;
							textDisplay.left 	= radius / 2;
						}
						else {
							background.radiusX 	= background.radiusY 	= 0;
							background.radiusX 	= background.radiusY 	= 0;
							border.radiusX 		= border.radiusY 		= 0;
							shadow.radiusX 		= shadow.radiusY 		= 0;
							//textDisplay.left = radius / 2;
						}
					}
					
					if (promptDisplay) {
						promptDisplay.setLayoutBoundsSize(unscaledWidth - clearButtonWidth - 2, unscaledHeight - 2);
						promptDisplay.setLayoutBoundsPosition(1, 1);
					}
				}
				else {
					border.visible = false;
					shadow.visible = false;
					
					background.left = background.top = background.right = background.bottom = 0;
					textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 0;
					
					if (promptDisplay) {
						promptDisplay.setLayoutBoundsSize(unscaledWidth, unscaledHeight);
						promptDisplay.setLayoutBoundsPosition(0, 0);
					}
				}
				
				if (showClearButton) {
					clearButtonWidth = clearButton.width + 5;
					textDisplay.right = clearButtonWidth;
				}
				
				
				// mobile theme excludes the borderColor property - we can't override so we add a second property
				borderStroke.color = getStyle("borderColorMobile") || getStyle("borderColor");
				borderStroke.alpha = getStyle("borderAlpha");
				// mobile theme excludes the backgroundColor property - we can't override so we add a second property
				bgFill.color = getStyle("backgroundColorMobile") || bgFill.color;
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}

			/**
			 *  @private
			 */
			private function updatePadding():void
			{
				if (!textDisplay)
					return;
				
				// Push padding styles into the textDisplay
				var padding:Number;
				
				padding = getStyle("paddingLeft");
				if (textDisplay.getStyle("paddingLeft") != padding)
					textDisplay.setStyle("paddingLeft", padding);
				
				padding = getStyle("paddingTop");
				if (textDisplay.getStyle("paddingTop") != padding)
					textDisplay.setStyle("paddingTop", padding);
				
				padding = getStyle("paddingRight");
				if (textDisplay.getStyle("paddingRight") != padding)
					textDisplay.setStyle("paddingRight", padding);
				
				padding = getStyle("paddingBottom");
				if (textDisplay.getStyle("paddingBottom") != padding)
					textDisplay.setStyle("paddingBottom", padding);
				
				if (!promptDisplay)
					return;
				
				padding = getStyle("paddingLeft");
				if (promptDisplay.getStyle("paddingLeft") != padding)
					promptDisplay.setStyle("paddingLeft", padding);
				
				padding = getStyle("paddingTop");
				if (promptDisplay.getStyle("paddingTop") != padding)
					promptDisplay.setStyle("paddingTop", padding);
				
				padding = getStyle("paddingRight");
				if (promptDisplay.getStyle("paddingRight") != padding)
					promptDisplay.setStyle("paddingRight", padding);
				
				padding = getStyle("paddingBottom");
				if (promptDisplay.getStyle("paddingBottom") != padding)
					promptDisplay.setStyle("paddingBottom", padding);
			}
			
			/**
			 *  @private
			 */
			override public function styleChanged(styleProp:String):void
			{
				var allStyles:Boolean = !styleProp || styleProp == "styleName";
				
				if (styleProp=="showSearchIcon") {
					showSearchIcon = getStyle("showSearchIcon");
				}
				
				super.styleChanged(styleProp);
				
				if (allStyles || styleProp.indexOf("padding") == 0)
				{
					paddingChanged = true;
					invalidateProperties();
				}
			}
			
			/** 
			 * @private 
			 */     
			private static const focusExclusions:Array = ["textDisplay"];
			
			/**
			 *  @private
			 */
			override public function get focusSkinExclusions():Array { return focusExclusions;};
			
			
			public function textDisplay_valueCommitHandler(event:FlexEvent):void {
				
				if (textDisplay.text!="") {
					clearButton.visible = true;
				}
				else {
					clearButton.visible = false;
				}
			}
			
			protected function textDisplay_changeHandler(event:TextOperationEvent):void
			{
				if (textDisplay.text!="") {
					clearButton.visible = true;
				}
				else {
					clearButton.visible = false;
				}
			}
			
		]]>
    </fx:Script>
    
    <s:states>
        <s:State name="normal"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="normalWithPrompt"/>
        <s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
    </s:states>
    
    <!-- border --> 
    <!--- @private -->
    <s:Rect left="0" right="0" top="0" bottom="0" id="border">
        <s:stroke>     
            <!--- @private -->
            <s:SolidColorStroke id="borderStroke" weight="1" color="#CCCCCC" />
        </s:stroke>
    </s:Rect>

    <!-- fill -->
    <!--- Defines the appearance of the TextInput component's background. -->
    <s:Rect id="background" left="1" right="1" top="1" bottom="1">
        <s:fill>
            <!--- @private Defines the background fill color. -->
            <s:SolidColor id="bgFill" color="0xF9F9F9" />
        </s:fill>
    </s:Rect>
    
    <!-- shadow -->
    <!--- @private -->
    <s:Rect left="1" top="1" right="1" height="1" id="shadow">
        <s:fill>
            <s:SolidColor color="0x000000" alpha="0.12" />
        </s:fill>
    </s:Rect>
    
    <!-- text -->
    <!--- @copy spark.components.supportClasses.SkinnableTextBase#textDisplay -->
    <s:RichEditableText id="textDisplay"
						verticalAlign="middle"
						widthInChars="10"
						valueCommit="textDisplay_valueCommitHandler(event)"
						change="textDisplay_changeHandler(event)"
						left="1" right="1" top="1" bottom="1" 
						/>
	
    <!--- Defines the Label that is used for prompt text. The includeInLayout property is false so the prompt text does not affect measurement. -->
    <s:Label id="promptDisplay" 
			 maxDisplayedLines="1"
			 verticalAlign="middle"
			 mouseEnabled="false" 
			 mouseChildren="false"
			 includeIn="normalWithPrompt,disabledWithPrompt" 
			 includeInLayout="false"
			 />
	
	
	<!-- search button -->
	<s:Button id="searchButton" 
			  visible="{textDisplay.text=='' &amp;&amp; showSearchIcon}"
			  includeInLayout="{textDisplay.text=='' &amp;&amp; showSearchIcon}"
			  right="4" top="1" bottom="1"
			  width="{clearButton.height}" 
			  focusEnabled="false" 
			  skinClass="{searchButtonSkin}"
			  />
	
	<!-- clear button -->
	<!--- @private -->
	<!--- clears the text input when pressed -->
	<s:Button id="clearButton" 
			  right="3" top="1" bottom="1"
			  visible="false"
			  width="{clearButton.height}" 
			  focusEnabled="false" 
			  skinClass="{clearButtonSkin}"
			  />
	
	
	
	<!---
	///////////////////////////////////////////////////////////////////////////
	//  SKINS
	///////////////////////////////////////////////////////////////////////////
	-->
	
	
	
	<fx:Declarations>
		
		<!--- search button skin -->
		<fx:Component className="searchButtonSkin">
			<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark"
						 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
						 minWidth="19" minHeight="23">
				
				<fx:Metadata>
					<![CDATA[
					/**
					* @copy spark.skins.spark.ApplicationSkin#hostComponent
					*/
					[HostComponent("spark.components.Button")]
					]]>
				</fx:Metadata>
				
				<!-- states -->
				<s:states>
					<s:State name="up"/>
					<s:State name="over"/>
					<s:State name="down"/>
					<s:State name="disabled"/>
				</s:states>               
				
				<!-- layer 1: fill hit area -->
				<!--- @private -->
				<s:Rect id="fill" left="1" right="1" top="1" bottom="1">
					<s:fill>
						<s:SolidColor alpha="0" color="#FFFFFF"/>
					</s:fill>
				</s:Rect>
				
				
				<!-- layer 2: search icon -->
				<!--- The search graphic displayed in the text input. -->
				<s:Group id="arrow"
						 top="4" left="4" right="4" bottom="4"
						 width="100%" height="100%" >
					<s:Path data="M6.01514 4.76758 4.72754 3.48047C4.8667 3.17285 4.94482 2.83203 4.94482 2.47266 4.94482 1.10742 3.83545 0 2.47119 0 1.1084 0 0 1.10742 0 2.47266 0 3.83398 1.1084 4.94434 2.47119 4.94434 2.83105 4.94434 3.17285 4.86523 3.48193 4.72656L4.76758 6.01367 C4.93994 6.18652 5.16553 6.27246 5.39111 6.27246 5.6167 6.27246 5.8418 6.18652 6.01514 6.01562 6.18701 5.84277 6.27246 5.61523 6.27246 5.39062 6.27246 5.16602 6.18701 4.94043 6.01514 4.76758ZM2.47119 4.08008C1.58545 4.08008 0.86377 3.35742 0.86377 2.47266 0.86377 1.58496 1.58545 0.863281 2.47119 0.863281 3.35889 0.863281 4.08203 1.58496 4.08203 2.47266 4.08203 3.35742 3.35889 4.08008 2.47119 4.08008Z"
							width="100%" height="100%">
						<s:fill>
							<s:SolidColor color="#989898" />
						</s:fill>
					</s:Path>
				</s:Group>
			</s:SparkSkin>
		</fx:Component>
		
		<!--- clear button skin -->
		<fx:Component className="clearButtonSkin" >
			<s:SparkSkin minWidth="19" minHeight="23">
				
				<fx:Metadata>
					<![CDATA[
					/**
					* @copy spark.skins.spark.ApplicationSkin#hostComponent
					*/
					[HostComponent("spark.components.Button")]
					]]>
				</fx:Metadata>
				
				<!-- states -->
				<s:states>
					<s:State name="up"/>
					<s:State name="over"/>
					<s:State name="down"/>
					<s:State name="disabled"/>
				</s:states>
				
				<!-- layer 1: fill hit area -->
				<!--- @private -->
				<s:Rect id="fill" left="1" right="1" top="1" bottom="1">
					<s:fill>
						<s:SolidColor alpha="0" color="#FFFFFF"/>
					</s:fill>
				</s:Rect>
				
				<!-- layer 2: clear icon -->
				<!--- The clear text icon -->
				<s:Group id="arrow"
						 top="4" left="4" right="4" bottom="4"
						 width="100%" height="100%" >
					
					<s:Ellipse width="100%" height="100%">
						<s:fill>
							<s:SolidColor alpha="1" color="#bababa" color.down="#787878"/>
						</s:fill>
					</s:Ellipse>
					
					<s:Group width="100%" height="100%"
							 scaleX="1" scaleY="1">
						
						<s:Path data="M0,0 L0,0 L3,3Z"
								horizontalCenter="0" verticalCenter="0"
								width="60%" height="60%">
							<s:stroke>
								<s:SolidColorStroke weight="2" color="#ffffff"/>
							</s:stroke>
						</s:Path>
						<s:Path data="M0,3 L0,3 L3,0Z"
								horizontalCenter="0" verticalCenter="0"
								width="60%" height="60%">
							<s:stroke>
								<s:SolidColorStroke weight="2" color="#ffffff"/>
							</s:stroke>
						</s:Path>
					</s:Group>
				</s:Group>
			</s:SparkSkin>
		</fx:Component>
	</fx:Declarations>
</s:SparkSkin>
